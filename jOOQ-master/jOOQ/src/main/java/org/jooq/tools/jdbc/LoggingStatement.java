/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Other licenses:
 * -----------------------------------------------------------------------------
 * Commercial licenses for this work are available. These replace the above
 * ASL 2.0 and offer limited warranties, support, maintenance, and commercial
 * database integrations.
 *
 * For more information, please visit: http://www.jooq.org/licenses
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package org.jooq.tools.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.jooq.tools.JooqLogger;

/**
 * @author Lukas Eder
 */
public class LoggingStatement extends DefaultStatement {

    private static final JooqLogger log = JooqLogger.getLogger(LoggingStatement.class);

    public LoggingStatement(Statement delegate) {
        super(delegate);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("execute", sql);

        return super.execute(sql);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("execute", sql);

        return super.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("execute", sql);

        return super.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("execute", sql);

        return super.execute(sql, columnNames);
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeQuery", sql);

        return super.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeUpdate", sql);

        return super.executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeUpdate", sql);

        return super.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeUpdate", sql);

        return super.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeUpdate", sql);

        return super.executeUpdate(sql, columnNames);
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("addBatch", sql);

        super.addBatch(sql);
    }



    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeLargeUpdate", sql);

        return super.executeLargeUpdate(sql);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeLargeUpdate", sql);

        return super.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeLargeUpdate", sql);

        return super.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        if (log.isDebugEnabled())
            log.debug("executeLargeUpdate", sql);

        return super.executeLargeUpdate(sql, columnNames);
    }


}
