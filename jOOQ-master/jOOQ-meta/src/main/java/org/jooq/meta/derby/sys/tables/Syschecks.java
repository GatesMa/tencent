/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.derby.sys.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.meta.derby.sys.Sys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Syschecks extends TableImpl<Record> {

    private static final long serialVersionUID = 543369665;

    /**
     * The reference instance of <code>SYS.SYSCHECKS</code>
     */
    public static final Syschecks SYSCHECKS = new Syschecks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>SYS.SYSCHECKS.CONSTRAINTID</code>.
     */
    public static final TableField<Record, String> CONSTRAINTID = createField(DSL.name("CONSTRAINTID"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), SYSCHECKS, "");

    /**
     * The column <code>SYS.SYSCHECKS.CHECKDEFINITION</code>.
     */
    public static final TableField<Record, String> CHECKDEFINITION = createField(DSL.name("CHECKDEFINITION"), org.jooq.impl.SQLDataType.LONGVARCHAR.nullable(false), SYSCHECKS, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static final TableField<Record, Object> REFERENCEDCOLUMNS = createField(DSL.name("REFERENCEDCOLUMNS"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"org.apache.derby.catalog.ReferencedColumns\"").nullable(false), SYSCHECKS, "");

    /**
     * No further instances allowed
     */
    private Syschecks() {
        this(DSL.name("SYSCHECKS"), null);
    }

    private Syschecks(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Syschecks(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Syschecks(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSCHECKS);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }
}
