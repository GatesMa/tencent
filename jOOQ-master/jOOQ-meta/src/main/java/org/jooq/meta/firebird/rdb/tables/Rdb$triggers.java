/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.firebird.rdb.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;
import org.jooq.meta.firebird.rdb.DefaultSchema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$triggers extends TableImpl<Record> {

    private static final long serialVersionUID = 224941405;

    /**
     * The reference instance of <code>RDB$TRIGGERS</code>
     */
    public static final Rdb$triggers RDB$TRIGGERS = new Rdb$triggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_NAME</code>.
     */
    public final TableField<Record, String> RDB$TRIGGER_NAME = createField(DSL.name("RDB$TRIGGER_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$RELATION_NAME</code>.
     */
    public final TableField<Record, String> RDB$RELATION_NAME = createField(DSL.name("RDB$RELATION_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_SEQUENCE</code>.
     */
    public final TableField<Record, Short> RDB$TRIGGER_SEQUENCE = createField(DSL.name("RDB$TRIGGER_SEQUENCE"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_TYPE</code>.
     */
    public final TableField<Record, Long> RDB$TRIGGER_TYPE = createField(DSL.name("RDB$TRIGGER_TYPE"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$TRIGGER_SOURCE = createField(DSL.name("RDB$TRIGGER_SOURCE"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_BLR</code>.
     */
    public final TableField<Record, byte[]> RDB$TRIGGER_BLR = createField(DSL.name("RDB$TRIGGER_BLR"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Record, String> RDB$DESCRIPTION = createField(DSL.name("RDB$DESCRIPTION"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_INACTIVE</code>.
     */
    public final TableField<Record, Short> RDB$TRIGGER_INACTIVE = createField(DSL.name("RDB$TRIGGER_INACTIVE"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$SYSTEM_FLAG = createField(DSL.name("RDB$SYSTEM_FLAG"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$FLAGS</code>.
     */
    public final TableField<Record, Short> RDB$FLAGS = createField(DSL.name("RDB$FLAGS"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$VALID_BLR</code>.
     */
    public final TableField<Record, Short> RDB$VALID_BLR = createField(DSL.name("RDB$VALID_BLR"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$DEBUG_INFO</code>.
     */
    public final TableField<Record, byte[]> RDB$DEBUG_INFO = createField(DSL.name("RDB$DEBUG_INFO"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$ENGINE_NAME</code>.
     */
    public final TableField<Record, String> RDB$ENGINE_NAME = createField(DSL.name("RDB$ENGINE_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$ENTRYPOINT</code>.
     */
    public final TableField<Record, String> RDB$ENTRYPOINT = createField(DSL.name("RDB$ENTRYPOINT"), org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * Create a <code>RDB$TRIGGERS</code> table reference
     */
    public Rdb$triggers() {
        this(DSL.name("RDB$TRIGGERS"), null);
    }

    /**
     * Create an aliased <code>RDB$TRIGGERS</code> table reference
     */
    public Rdb$triggers(String alias) {
        this(DSL.name(alias), RDB$TRIGGERS);
    }

    /**
     * Create an aliased <code>RDB$TRIGGERS</code> table reference
     */
    public Rdb$triggers(Name alias) {
        this(alias, RDB$TRIGGERS);
    }

    private Rdb$triggers(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$triggers(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(org.jooq.meta.firebird.rdb.tables.Rdb$triggers.RDB$TRIGGERS, "RDB$INDEX_8", org.jooq.meta.firebird.rdb.tables.Rdb$triggers.RDB$TRIGGERS.RDB$TRIGGER_NAME)
        );
    }

    @Override
    public Rdb$triggers as(String alias) {
        return new Rdb$triggers(DSL.name(alias), this);
    }

    @Override
    public Rdb$triggers as(Name alias) {
        return new Rdb$triggers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$triggers rename(String name) {
        return new Rdb$triggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$triggers rename(Name name) {
        return new Rdb$triggers(name, null);
    }
}
