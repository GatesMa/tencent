/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.derby.sys.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.meta.derby.sys.Sys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Systables extends TableImpl<Record> {

    private static final long serialVersionUID = -18187726;

    /**
     * The reference instance of <code>SYS.SYSTABLES</code>
     */
    public static final Systables SYSTABLES = new Systables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>SYS.SYSTABLES.TABLEID</code>.
     */
    public static final TableField<Record, String> TABLEID = createField(DSL.name("TABLEID"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), SYSTABLES, "");

    /**
     * The column <code>SYS.SYSTABLES.TABLENAME</code>.
     */
    public static final TableField<Record, String> TABLENAME = createField(DSL.name("TABLENAME"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), SYSTABLES, "");

    /**
     * The column <code>SYS.SYSTABLES.TABLETYPE</code>.
     */
    public static final TableField<Record, String> TABLETYPE = createField(DSL.name("TABLETYPE"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), SYSTABLES, "");

    /**
     * The column <code>SYS.SYSTABLES.SCHEMAID</code>.
     */
    public static final TableField<Record, String> SCHEMAID = createField(DSL.name("SCHEMAID"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), SYSTABLES, "");

    /**
     * The column <code>SYS.SYSTABLES.LOCKGRANULARITY</code>.
     */
    public static final TableField<Record, String> LOCKGRANULARITY = createField(DSL.name("LOCKGRANULARITY"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), SYSTABLES, "");

    /**
     * No further instances allowed
     */
    private Systables() {
        this(DSL.name("SYSTABLES"), null);
    }

    private Systables(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Systables(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Systables(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSTABLES);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }
}
