/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.firebird.rdb.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;
import org.jooq.meta.firebird.rdb.DefaultSchema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$indices extends TableImpl<Record> {

    private static final long serialVersionUID = 1007621761;

    /**
     * The reference instance of <code>RDB$INDICES</code>
     */
    public static final Rdb$indices RDB$INDICES = new Rdb$indices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RDB$INDICES.RDB$INDEX_NAME</code>.
     */
    public final TableField<Record, String> RDB$INDEX_NAME = createField(DSL.name("RDB$INDEX_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$INDICES.RDB$RELATION_NAME</code>.
     */
    public final TableField<Record, String> RDB$RELATION_NAME = createField(DSL.name("RDB$RELATION_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$INDICES.RDB$INDEX_ID</code>.
     */
    public final TableField<Record, Short> RDB$INDEX_ID = createField(DSL.name("RDB$INDEX_ID"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$UNIQUE_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$UNIQUE_FLAG = createField(DSL.name("RDB$UNIQUE_FLAG"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$DESCRIPTION</code>.
     */
    public final TableField<Record, String> RDB$DESCRIPTION = createField(DSL.name("RDB$DESCRIPTION"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$SEGMENT_COUNT</code>.
     */
    public final TableField<Record, Short> RDB$SEGMENT_COUNT = createField(DSL.name("RDB$SEGMENT_COUNT"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$INDEX_INACTIVE</code>.
     */
    public final TableField<Record, Short> RDB$INDEX_INACTIVE = createField(DSL.name("RDB$INDEX_INACTIVE"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$INDEX_TYPE</code>.
     */
    public final TableField<Record, Short> RDB$INDEX_TYPE = createField(DSL.name("RDB$INDEX_TYPE"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$FOREIGN_KEY</code>.
     */
    public final TableField<Record, String> RDB$FOREIGN_KEY = createField(DSL.name("RDB$FOREIGN_KEY"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$INDICES.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$SYSTEM_FLAG = createField(DSL.name("RDB$SYSTEM_FLAG"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>RDB$INDICES.RDB$EXPRESSION_BLR</code>.
     */
    public final TableField<Record, byte[]> RDB$EXPRESSION_BLR = createField(DSL.name("RDB$EXPRESSION_BLR"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$EXPRESSION_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$EXPRESSION_SOURCE = createField(DSL.name("RDB$EXPRESSION_SOURCE"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$STATISTICS</code>.
     */
    public final TableField<Record, Double> RDB$STATISTICS = createField(DSL.name("RDB$STATISTICS"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>RDB$INDICES</code> table reference
     */
    public Rdb$indices() {
        this(DSL.name("RDB$INDICES"), null);
    }

    /**
     * Create an aliased <code>RDB$INDICES</code> table reference
     */
    public Rdb$indices(String alias) {
        this(DSL.name(alias), RDB$INDICES);
    }

    /**
     * Create an aliased <code>RDB$INDICES</code> table reference
     */
    public Rdb$indices(Name alias) {
        this(alias, RDB$INDICES);
    }

    private Rdb$indices(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$indices(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(org.jooq.meta.firebird.rdb.tables.Rdb$indices.RDB$INDICES, "RDB$INDEX_5", org.jooq.meta.firebird.rdb.tables.Rdb$indices.RDB$INDICES.RDB$INDEX_NAME)
        );
    }

    @Override
    public Rdb$indices as(String alias) {
        return new Rdb$indices(DSL.name(alias), this);
    }

    @Override
    public Rdb$indices as(Name alias) {
        return new Rdb$indices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$indices rename(String name) {
        return new Rdb$indices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$indices rename(Name name) {
        return new Rdb$indices(name, null);
    }
}
