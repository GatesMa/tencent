/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.firebird.rdb.tables;


import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.meta.firebird.rdb.DefaultSchema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$indexSegments extends TableImpl<Record> {

    private static final long serialVersionUID = -131224289;

    /**
     * The reference instance of <code>RDB$INDEX_SEGMENTS</code>
     */
    public static final Rdb$indexSegments RDB$INDEX_SEGMENTS = new Rdb$indexSegments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RDB$INDEX_SEGMENTS.RDB$INDEX_NAME</code>.
     */
    public final TableField<Record, String> RDB$INDEX_NAME = createField(DSL.name("RDB$INDEX_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$INDEX_SEGMENTS.RDB$FIELD_NAME</code>.
     */
    public final TableField<Record, String> RDB$FIELD_NAME = createField(DSL.name("RDB$FIELD_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$INDEX_SEGMENTS.RDB$FIELD_POSITION</code>.
     */
    public final TableField<Record, Short> RDB$FIELD_POSITION = createField(DSL.name("RDB$FIELD_POSITION"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDEX_SEGMENTS.RDB$STATISTICS</code>.
     */
    public final TableField<Record, Double> RDB$STATISTICS = createField(DSL.name("RDB$STATISTICS"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>RDB$INDEX_SEGMENTS</code> table reference
     */
    public Rdb$indexSegments() {
        this(DSL.name("RDB$INDEX_SEGMENTS"), null);
    }

    /**
     * Create an aliased <code>RDB$INDEX_SEGMENTS</code> table reference
     */
    public Rdb$indexSegments(String alias) {
        this(DSL.name(alias), RDB$INDEX_SEGMENTS);
    }

    /**
     * Create an aliased <code>RDB$INDEX_SEGMENTS</code> table reference
     */
    public Rdb$indexSegments(Name alias) {
        this(alias, RDB$INDEX_SEGMENTS);
    }

    private Rdb$indexSegments(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$indexSegments(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Rdb$indexSegments as(String alias) {
        return new Rdb$indexSegments(DSL.name(alias), this);
    }

    @Override
    public Rdb$indexSegments as(Name alias) {
        return new Rdb$indexSegments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$indexSegments rename(String name) {
        return new Rdb$indexSegments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$indexSegments rename(Name name) {
        return new Rdb$indexSegments(name, null);
    }
}
