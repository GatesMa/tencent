/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.firebird.rdb.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;
import org.jooq.meta.firebird.rdb.DefaultSchema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$relations extends TableImpl<Record> {

    private static final long serialVersionUID = 881906766;

    /**
     * The reference instance of <code>RDB$RELATIONS</code>
     */
    public static final Rdb$relations RDB$RELATIONS = new Rdb$relations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RDB$RELATIONS.RDB$VIEW_BLR</code>.
     */
    public final TableField<Record, byte[]> RDB$VIEW_BLR = createField(DSL.name("RDB$VIEW_BLR"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$VIEW_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$VIEW_SOURCE = createField(DSL.name("RDB$VIEW_SOURCE"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Record, String> RDB$DESCRIPTION = createField(DSL.name("RDB$DESCRIPTION"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$RELATION_ID</code>.
     */
    public final TableField<Record, Short> RDB$RELATION_ID = createField(DSL.name("RDB$RELATION_ID"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$SYSTEM_FLAG = createField(DSL.name("RDB$SYSTEM_FLAG"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$DBKEY_LENGTH</code>.
     */
    public final TableField<Record, Short> RDB$DBKEY_LENGTH = createField(DSL.name("RDB$DBKEY_LENGTH"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$FORMAT</code>.
     */
    public final TableField<Record, Short> RDB$FORMAT = createField(DSL.name("RDB$FORMAT"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$FIELD_ID</code>.
     */
    public final TableField<Record, Short> RDB$FIELD_ID = createField(DSL.name("RDB$FIELD_ID"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$RELATION_NAME</code>.
     */
    public final TableField<Record, String> RDB$RELATION_NAME = createField(DSL.name("RDB$RELATION_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$SECURITY_CLASS</code>.
     */
    public final TableField<Record, String> RDB$SECURITY_CLASS = createField(DSL.name("RDB$SECURITY_CLASS"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$EXTERNAL_FILE</code>.
     */
    public final TableField<Record, String> RDB$EXTERNAL_FILE = createField(DSL.name("RDB$EXTERNAL_FILE"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$RUNTIME</code>.
     */
    public final TableField<Record, byte[]> RDB$RUNTIME = createField(DSL.name("RDB$RUNTIME"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$EXTERNAL_DESCRIPTION</code>.
     */
    public final TableField<Record, byte[]> RDB$EXTERNAL_DESCRIPTION = createField(DSL.name("RDB$EXTERNAL_DESCRIPTION"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$OWNER_NAME</code>.
     */
    public final TableField<Record, String> RDB$OWNER_NAME = createField(DSL.name("RDB$OWNER_NAME"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$DEFAULT_CLASS</code>.
     */
    public final TableField<Record, String> RDB$DEFAULT_CLASS = createField(DSL.name("RDB$DEFAULT_CLASS"), org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$FLAGS</code>.
     */
    public final TableField<Record, Short> RDB$FLAGS = createField(DSL.name("RDB$FLAGS"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATIONS.RDB$RELATION_TYPE</code>.
     */
    public final TableField<Record, Short> RDB$RELATION_TYPE = createField(DSL.name("RDB$RELATION_TYPE"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>RDB$RELATIONS</code> table reference
     */
    public Rdb$relations() {
        this(DSL.name("RDB$RELATIONS"), null);
    }

    /**
     * Create an aliased <code>RDB$RELATIONS</code> table reference
     */
    public Rdb$relations(String alias) {
        this(DSL.name(alias), RDB$RELATIONS);
    }

    /**
     * Create an aliased <code>RDB$RELATIONS</code> table reference
     */
    public Rdb$relations(Name alias) {
        this(alias, RDB$RELATIONS);
    }

    private Rdb$relations(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$relations(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(org.jooq.meta.firebird.rdb.tables.Rdb$relations.RDB$RELATIONS, "RDB$INDEX_0", org.jooq.meta.firebird.rdb.tables.Rdb$relations.RDB$RELATIONS.RDB$RELATION_NAME)
        );
    }

    @Override
    public Rdb$relations as(String alias) {
        return new Rdb$relations(DSL.name(alias), this);
    }

    @Override
    public Rdb$relations as(Name alias) {
        return new Rdb$relations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$relations rename(String name) {
        return new Rdb$relations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$relations rename(Name name) {
        return new Rdb$relations(name, null);
    }
}
