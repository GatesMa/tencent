/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.chart.db.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.example.chart.db.Indexes;
import org.jooq.example.chart.db.Keys;
import org.jooq.example.chart.db.Public;
import org.jooq.example.chart.db.tables.records.PaymentP2007_06Record;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentP2007_06 extends TableImpl<PaymentP2007_06Record> {

    private static final long serialVersionUID = 1004578160;

    /**
     * The reference instance of <code>public.payment_p2007_06</code>
     */
    public static final PaymentP2007_06 PAYMENT_P2007_06 = new PaymentP2007_06();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentP2007_06Record> getRecordType() {
        return PaymentP2007_06Record.class;
    }

    /**
     * The column <code>public.payment_p2007_06.payment_id</code>.
     */
    public final TableField<PaymentP2007_06Record, Integer> PAYMENT_ID = createField(DSL.name("payment_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('payment_payment_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.payment_p2007_06.customer_id</code>.
     */
    public final TableField<PaymentP2007_06Record, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_p2007_06.staff_id</code>.
     */
    public final TableField<PaymentP2007_06Record, Integer> STAFF_ID = createField(DSL.name("staff_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_p2007_06.rental_id</code>.
     */
    public final TableField<PaymentP2007_06Record, Integer> RENTAL_ID = createField(DSL.name("rental_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_p2007_06.amount</code>.
     */
    public final TableField<PaymentP2007_06Record, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC(5, 2).nullable(false), this, "");

    /**
     * The column <code>public.payment_p2007_06.payment_date</code>.
     */
    public final TableField<PaymentP2007_06Record, LocalDateTime> PAYMENT_DATE = createField(DSL.name("payment_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.payment_p2007_06</code> table reference
     */
    public PaymentP2007_06() {
        this(DSL.name("payment_p2007_06"), null);
    }

    /**
     * Create an aliased <code>public.payment_p2007_06</code> table reference
     */
    public PaymentP2007_06(String alias) {
        this(DSL.name(alias), PAYMENT_P2007_06);
    }

    /**
     * Create an aliased <code>public.payment_p2007_06</code> table reference
     */
    public PaymentP2007_06(Name alias) {
        this(alias, PAYMENT_P2007_06);
    }

    private PaymentP2007_06(Name alias, Table<PaymentP2007_06Record> aliased) {
        this(alias, aliased, null);
    }

    private PaymentP2007_06(Name alias, Table<PaymentP2007_06Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PaymentP2007_06(Table<O> child, ForeignKey<O, PaymentP2007_06Record> key) {
        super(child, key, PAYMENT_P2007_06);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_FK_PAYMENT_P2007_06_CUSTOMER_ID, Indexes.IDX_FK_PAYMENT_P2007_06_STAFF_ID);
    }

    @Override
    public Identity<PaymentP2007_06Record, Integer> getIdentity() {
        return Keys.IDENTITY_PAYMENT_P2007_06;
    }

    @Override
    public List<ForeignKey<PaymentP2007_06Record, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentP2007_06Record, ?>>asList(Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY, Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_STAFF_ID_FKEY, Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_RENTAL_ID_FKEY);
    }

    public Customer customer() {
        return new Customer(this, Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY);
    }

    public Staff staff() {
        return new Staff(this, Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_STAFF_ID_FKEY);
    }

    public Rental rental() {
        return new Rental(this, Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_RENTAL_ID_FKEY);
    }

    @Override
    public List<Check<PaymentP2007_06Record>> getChecks() {
        return Arrays.<Check<PaymentP2007_06Record>>asList(
              Internal.createCheck(this, DSL.name("payment_p2007_06_payment_date_check"), "(((payment_date >= '2007-06-01 00:00:00'::timestamp without time zone) AND (payment_date < '2007-07-01 00:00:00'::timestamp without time zone)))", true)
        );
    }

    @Override
    public PaymentP2007_06 as(String alias) {
        return new PaymentP2007_06(DSL.name(alias), this);
    }

    @Override
    public PaymentP2007_06 as(Name alias) {
        return new PaymentP2007_06(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentP2007_06 rename(String name) {
        return new PaymentP2007_06(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentP2007_06 rename(Name name) {
        return new PaymentP2007_06(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, Integer, BigDecimal, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
