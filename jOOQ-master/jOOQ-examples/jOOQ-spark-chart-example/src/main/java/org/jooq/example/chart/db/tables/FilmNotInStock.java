/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.chart.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.example.chart.db.Public;
import org.jooq.example.chart.db.tables.records.FilmNotInStockRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FilmNotInStock extends TableImpl<FilmNotInStockRecord> {

    private static final long serialVersionUID = -339222110;

    /**
     * The reference instance of <code>public.film_not_in_stock</code>
     */
    public static final FilmNotInStock FILM_NOT_IN_STOCK = new FilmNotInStock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmNotInStockRecord> getRecordType() {
        return FilmNotInStockRecord.class;
    }

    /**
     * The column <code>public.film_not_in_stock.p_film_count</code>.
     */
    public final TableField<FilmNotInStockRecord, Integer> P_FILM_COUNT = createField(DSL.name("p_film_count"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.film_not_in_stock</code> table reference
     */
    public FilmNotInStock() {
        this(DSL.name("film_not_in_stock"), null);
    }

    /**
     * Create an aliased <code>public.film_not_in_stock</code> table reference
     */
    public FilmNotInStock(String alias) {
        this(DSL.name(alias), FILM_NOT_IN_STOCK);
    }

    /**
     * Create an aliased <code>public.film_not_in_stock</code> table reference
     */
    public FilmNotInStock(Name alias) {
        this(alias, FILM_NOT_IN_STOCK);
    }

    private FilmNotInStock(Name alias, Table<FilmNotInStockRecord> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private FilmNotInStock(Name alias, Table<FilmNotInStockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FilmNotInStock(Table<O> child, ForeignKey<O, FilmNotInStockRecord> key) {
        super(child, key, FILM_NOT_IN_STOCK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public FilmNotInStock as(String alias) {
        return new FilmNotInStock(DSL.name(alias), this, parameters);
    }

    @Override
    public FilmNotInStock as(Name alias) {
        return new FilmNotInStock(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmNotInStock rename(String name) {
        return new FilmNotInStock(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmNotInStock rename(Name name) {
        return new FilmNotInStock(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public FilmNotInStock call(Integer pFilmId, Integer pStoreId) {
        return new FilmNotInStock(DSL.name(getName()), null, new Field[] { 
              DSL.val(pFilmId, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(pStoreId, org.jooq.impl.SQLDataType.INTEGER)
        });
    }

    /**
     * Call this table-valued function
     */
    public FilmNotInStock call(Field<Integer> pFilmId, Field<Integer> pStoreId) {
        return new FilmNotInStock(DSL.name(getName()), null, new Field[] { 
              pFilmId
            , pStoreId
        });
    }
}
